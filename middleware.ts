// middleware.ts
import { NextRequest, NextResponse } from "next/server";
import { jwtVerify } from "jose";

// H√†m gi·∫£i m√£ token
async function verifyJWT(token: string) {
  try {
    const { payload } = await jwtVerify(
      token,
      new TextEncoder().encode(process.env.JWT_SECRET || "your-secret-key")
    );
    return payload;
  } catch (error) {
    console.error("‚ùå L·ªói verify token:", error);
    return null;
  }
}

export async function middleware(request: NextRequest) {
  const token = request.cookies.get("token")?.value;

  // Kh√¥ng c√≥ token ‚Üí redirect
  if (!token) {
    console.log("‚õî Kh√¥ng c√≥ token, redirect v·ªÅ login");
    return NextResponse.redirect(new URL("/login", request.url));
  }

  const payload = await verifyJWT(token);

  // Token kh√¥ng h·ª£p l·ªá
  if (!payload) {
    console.log("‚õî Token kh√¥ng h·ª£p l·ªá");
    return NextResponse.redirect(new URL("/login", request.url));
  }

  // üëâ Ch·ªâ cho admin (vai_tro === 1) truy c·∫≠p admin route
  if (payload.vai_tro !== 1) {
    console.log("üö´ Kh√¥ng ƒë·ªß quy·ªÅn truy c·∫≠p");
    return NextResponse.redirect(new URL("/login", request.url));
  }

  console.log("‚úÖ Token h·ª£p l·ªá, ti·∫øp t·ª•c truy c·∫≠p");
  return NextResponse.next();
}

export const config = {
  matcher: [
    "/", // home
    "/loai/:path*",
    "/san-pham/:path*",
    "/don-hang/:path*",
    "/tin-tuc/:path*",
    "/users/:path*",
  ],
};
